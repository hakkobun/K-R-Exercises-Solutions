/* Reads a C program, and prints in alphabetical order each group of variable names */
/* that are identical in the first 6 characters, but different somewhere thereafter */
/* STEP2: Don't count words within strings and comments. */
/* STEP3: MAKE 6 a parameter that can be set from the command line */


/* Example ---------------------------------------------
LEN = 6

#include <stdio.h>
int main()
{
	int positionVector;
	int positionTransformer;
	int positionLocater;

	float graphicsConvert;
	float graphicsDepressedMood;
	float graphicsSeniorAnalyst;

	char chemistryIsSoBoring;
	char chemistryIsNotSoBoring;
	char chemistryIsGoddamnInteresting;
	
	return 0;
}

WILL RETURN 
----------------
chemis: chemistryA, chemistryB, chemistryC
graphi: graphicsA, graphicsB, graphicsC
positi: positionL, positionT, positionV 
-------------------------------------------------------*/

/* Algo Version 2 

	Preprocess:
		add every word after struct to the type tree





*/




/* Algorithm

	get "word"
		if it's a variable name
			if len > 6
				add it to the Tree
				
	in-order print the Tree
		print the group name, then all the arrays

*/


/* Structure that I will use is a BST with a nested BST of all the words */


subdivide the problem

1) forget about the C program thing, just make a prototype version first. That is just a plain text, one word per line. Focus on the core of the sorting/storage first
2) Now, let's read from a C source file: check if the word is a valid type, and the next "name" is not followed by ()
3) If the word is struct, then add to the word list!!

4) Okay, I added and changed to many stuffs at the same time My brain exploded LMAO



(TRY HARD DEVELOPMENT TRAINING)
(no Son no Care whether i'll fail or successfully build it or not)
(just try to apply what I learn as much as possible)
(and be close to the reality)



Problem Statement Ver3.c (FINAL C PROJECT) 

detect these variable names ------------------

int countMe;
int a, ***b,    c[2],		 *d[125], e();			-> Add a,b,c,d but not e
int i1[2] = {0,3},  i5[];							-> Add i1, i5
char m5[] = "char doNotCountMe", m6[] = "char";		-> Add m5, m6	
int *countMe;										-> Extract just the name, not the asterisk



struct {} countMe;									-> Just one instance (the only exception)
struct type {} a,b,c;								
struct point {}; 									-> Recognized as a new type

typedef int newtype; newtype countMe;				-> Recognized as a new type
typedef struct point newtype; newtype countMe;		-> Recognized as a new type

Don't count function names-followed instantly by ( 		int doNotCountMe()
But do count pointers to function- as in					int (*countMe)()

Don't count word in strings		"int doNotCountMe"
Don't count word in comments 	/* int doNotCountMe */

int function(int doNotCountMe, char (*doNotCountMeToo)())


-------------------------------------
struct {

} a;			// add a
-------------------------------------
struct xxx {

} b;			// add b
-------------------------------------
struct xxx c;	// add c
-------------------------------------
struct {

} ;				// not handling this case

-------------------------------------

// not handling error detection here


Then display it in groups which are identical in the first 6 (parameter) characters, 
but different somewhere thereafter



My program

addNewType: add the new type to the type tree
checkIsValidType: binary search the type tree



int a, ***b,    c[2],		 *d[125], e();

1) valid type name -> enter getting the list states -> FETCH ALL ';' -> leave the states
2) struct 	-> a word

			-> { }







